<!--
  Copyright (C) 2007 Unicon, Inc.

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this distribution.  It is also available here:
  http://www.fsf.org/licensing/licenses/gpl.html

  As a special exception to the terms and conditions of version 
  2 of the GPL, you may redistribute this Program in connection 
  with Free/Libre and Open Source Software ("FLOSS") applications 
  as described in the GPL FLOSS exception.  You should have received
  a copy of the text describing the FLOSS exception along with this
  distribution.
-->
<!--
    GatewayPortlet configuration.

    One GatewayPortlet configuration file should exist per GatewayPortlet
    instance desired. Each GatewayPortlet instance can hold any number of SSO
    entries.

    There exists no internal mechanism for providing authorization rules on a
    specific sso-entry; instead, it is recommended that a separate
    GatewayPortlet instance be used when only a certain group of people should
    have access to an entry point. ChannelManager can then be used to restrict
    access to the channel publication.
-->
<gateway peephole="gateway_main">

    <!--
        The title to display when showing a list of available SSO entries. If
        only a single iframe entry is specified, the sso-entry's label will be
        displayed in its place.
    -->
    <title>Gateway Portlet Test</title>
    
    <ajax-callback-url>/toro-portlets-common/ssoCallback</ajax-callback-url>

    <!--
        Single Sign-On entry for an external system.
        The attribute 'handle' is required, and must be unique among other
        sso-entry elements.
    -->
    <sso-entry handle="jsp-test" class="largeLink">
        <!-- Label and description to identify the external site. -->
        <label>jsp Test</label>
        <description>JSP Test Page</description>

		<!--
			The target section identifies the URL, method and parameters.
			Both the parameter values and the target URL can be tokenized,
			allowing for dynamic replacement based on the current user's
			attributes (as dictated by portlet.xml), and any attributes supplied
			by the <authentication/> module. A tokenized string is a string in
			the form of '{somekey}'.
		-->
		<target handle="initial">
			<!-- The url can be tokenized, too. This allows the use of
				HTTP-Basic authentication mechanisms, as well as possible unique
				uses. HTTP-Basic would be in the form of:
				http://{auth.username}:{auth.password}@mysite.com/
			-->
            <url>@portal.server.http.protocol@://@portal.server.hostname@@portal.server.port@/toro-gateway-portlet/rendering/jsp/sso-test.jsp</url>
			<method>get</method>
			<parameter name="portalUsername"><value>{user.login.id}</value></parameter>
			<parameter name="portalPassword"><value>{password}</value></parameter>
			<parameter name="authUsername"><value>{auth.username}</value></parameter>
			<parameter name="authPassword"><value>{auth.password}</value></parameter>
			<parameter name="someString"><value>This is my username: {user.login.id}</value></parameter>
		</target>
		<target handle="submit">
			<!-- The url can be tokenized, too. This allows the use of
				HTTP-Basic authentication mechanisms, as well as possible unique
				uses. HTTP-Basic would be in the form of:
				http://{auth.username}:{auth.password}@mysite.com/
			-->
            <url>@portal.server.http.protocol@://@portal.server.hostname@@portal.server.port@/toro-gateway-portlet/rendering/jsp/sso-test.jsp</url>
			<method>post</method>
			<!--
				If this module were to require additional parameters, they
				would be specified here. The format of these parameters is as
				follows:
				<parameter name="myparam1"><value>my value</value></parameter>
				<parameter name="myparam2"><value>{myattribute}</value></parameter>
				<parameter name="myparam3"><value>my value and {myattribute}</value></parameter>
			-->
			<parameter name="portalUsername"><value>{user.login.id}</value></parameter>
			<parameter name="portalPassword"><value>{password}</value></parameter>
			<parameter name="authUsername"><value>{auth.username}</value></parameter>
			<parameter name="authPassword"><value>{auth.password}</value></parameter>
			<parameter name="someString"><value>This is my username: {user.login.id}</value></parameter>
		</target>
		<target handle="newvals">
            <url>@portal.server.http.protocol@://@portal.server.hostname@@portal.server.port@/toro-gateway-portlet/rendering/jsp/sso-test.jsp</url>
			<method>post</method>
			<parameter name="myNewParameter"><value>Some value</value></parameter>
		</target>
		
        <!--
            A sequence defines one or more targets that must be submitted in sequence.
            The only two expected sequence types are "login" and "refresh". The
            "login" sequence type must always exist; the "refresh" sequence may
            be specified if you wish for a difference sequence to be executed
            after the user's first login has ocurred. All other sequences are
            available via buttons in the user interface.
        -->
		<sequence type="login">
			<target handle="initial" />
			<target handle="submit" />
		</sequence>
		<sequence type="origvals">
			<sequence-start-trigger>
                <context type="iframe">
                    <image src="images/icons/link_icon_large.gif" class="regImage"
                        border="0" align="middle" alt="Change parameters"/>
                    <text>
                        <label>Original Values</label>
                        <description>Original Values</description>
                    </text>
                </context>
			</sequence-start-trigger>
			<target handle="initial" />
			<target handle="submit" />
		</sequence>
		<sequence type="changevals">
			<sequence-start-trigger>
                <context type="iframe">
                    <image src="images/icons/link_icon_large.gif" class="regImage"
                        border="0" align="middle" alt="Change parameters"/>
                    <text>
                        <label>Change Values</label>
                        <description>Change Values</description>
                    </text>
                </context>
			</sequence-start-trigger>
			<target handle="newvals" />
		</sequence>

        <!--
            Window definition. Type can be either 'popup' or 'iframe'.
            <title> and <name> can be declared for both.
            If using type 'iframe', the element <style> can be defined to contain CSS information.
            If using type 'popup', the element <properties> can be defined to specify window parameters.
        -->
        <window type="iframe">
            <title>SSO Test</title>
            <name>SSOTest</name>
            <style>width: 100%; height: 250px; border: 0px;</style>
        </window>

        <!--
            Authentication handlers can be specified to provide more robust
            mapping of user attributes to a set of credentials for an external
            system. The primary use for this would be single-sign-on for an
            external system that uses a different set of credentials than the
            portal.

            The SsoMultiAuthentication handler offers a mapping of a username
            and site key to a set of credentials. These credentials can be
            entered and modified interactively by the user, but will be stored
            for them to allow SSO in all subsequent logins.

            SsoMultiAuthentication will provide two additional attributes
            available for use as tokens in the target parameters and url. These
            are 'auth.username' and 'auth.password'.
        -->
        <authentication handler="net.unicon.academus.apps.SsoMultiAuthentication">
            <!-- Parameters for the authentication module. No tokenization allowed here. -->

            <!-- The system key to use as part of the mapping. -->
            <parameter name="system-key"><value>sso-test</value></parameter>
            
            <!-- The user attribute that resolves into the username. -->
            <parameter name="username-key"><value>user.login.id</value></parameter>
            
            <!-- Encryption service reference name [see encryption.xml] -->
            <parameter name="encrypt-ref-key"><value>cromagnum</value></parameter>

            <!-- JNDI reference to the database to store mapped credentials to. -->
            <parameter name="jndi-ref"><value>java:comp/env/jdbc/@datasource@</value></parameter>
        </authentication>
    </sso-entry>

    <!-- Example Sakai configuration
    <sso-entry handle="sakai" class="largeSakai">        
        <label>Sakai</label>
        <description>Sakai</description>  
		
		<target handle="init">            
			<url>http://sakai2.unicon.net/portal/login</url>
            <method>get</method>
	    </target>
		<target handle="log">
			<url>http://sakai2.unicon.net/portal/login</url>
            <method>post</method>

			<parameter name="eid"><value>{auth.username}</value></parameter>
			<parameter name="pw"><value>{auth.password}</value></parameter>
		</target>

		<sequence type="login">
			<target handle="init" />
			<target handle="log" />
		</sequence>

		<window type="iframe">
            <title>Sakai</title>
            <name>Sakai</name>
            <style>width: 100%; height: 500px; border: 0px;</style>
        </window>

        <authentication handler="net.unicon.academus.apps.SsoMultiAuthentication">
            <parameter name="system-key"><value>sakai</value></parameter>
            <parameter name="username-key"><value>user.login.id</value></parameter>
            <parameter name="encrypt-ref-key"><value>cromagnum</value></parameter>
            <parameter name="jndi-ref"><value>java:comp/env/jdbc/@datasource@</value></parameter>
        </authentication>
    </sso-entry>
    -->

    <!-- Nothing below this line should require modification in normal usage. -->

    <!-- JNDI Reference to the database. -->
    <jndi-ref>java:comp/env/jdbc/@datasource@</jndi-ref>
</gateway>
