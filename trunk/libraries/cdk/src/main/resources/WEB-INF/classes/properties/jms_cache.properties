#############################
#
#    JMS Dirty Cache Model
#
# The jms cache properties are for the JMS cache listener only. 
# These properties are needed to connect to the JMS (JBoss) server. 
# JMS (Java Messaging Service) allows application to send a message 
# to a server for other servers to listen to and do the appropiate 
# action. As with databases, these properties need to be correct in 
# order to connect the JMS server and work.
#
## Determines whether or not you want to dirty your local server. You
## may want set this to false if you wanted to send a JMS message out
## and recieve a message via jms, and then dirty.  Otherwise, the message
## will go out and the server will dirty itself.  If useMessageFilters is
## set to false, it would dirty the same content twice.
net.unicon.portal.cache.jms.DirtyLocalServer=true
#
## The setting tells if you want to use JMS Message Filters.  An
## example of a filter is, do you handle a message from a server,
## if (the publish server == the subscribter server)
net.unicon.portal.cache.jms.useMessageFilters=true
#
# JMS Connection information
# --------------------------
## Username and password that connects to the JMS (JBoss) server 
net.unicon.sdk.cache.jms.Username=anonymous
net.unicon.sdk.cache.jms.Password=anonymous
#
## Location of the JMS (JBoss) server.  This is the location where the topic
## and other settings are found.
#net.unicon.sdk.cache.jms.ProviderURLSubscriber=@MULTIBOXPARAM_JBOSS_HOST_NAME@:@JBOSSSERVER_NAMING_SERVICE_PORT@
net.unicon.sdk.cache.jms.ProviderURLSubscriber=@portal.server.hostname@:3099
#
## There are two common methods for retrieving a JNDI Context. 
## If a file resource named jndi.properties is available to the JNDI API, it 
## will use the information found therein to retrieve an initial JNDI context. 
## This parameter is used to obtain an initial context factory.
net.unicon.sdk.cache.jms.InitialContextFactorySubscriber=org.jnp.interfaces.NamingContextFactory
#
## A subscriber or listener uses a TopicConnectionFactory object to create 
## TopicConnection objects with a publish/subscribe JMS provider. 
net.unicon.sdk.cache.jms.TopicConnectionFactorySubscriber=RMIConnectionFactory
#
## The name or identification of the topic that the subscriber listens too
net.unicon.sdk.cache.jms.SubscriptionTopicList=topic/primarytopic
#
## The name of this server or the name of this listener/subscriber & publisher
net.unicon.sdk.cache.jms.SubscriberName=@portal.server.hostname@
#
#############################
