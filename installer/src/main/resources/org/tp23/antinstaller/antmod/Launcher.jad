// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Launcher.java

package org.tp23.antinstaller.antmod;

import java.io.File;
import java.net.*;
import java.util.*;
import org.apache.tools.ant.launch.LaunchException;
import org.apache.tools.ant.launch.Locator;
import org.tp23.antinstaller.InstallerContext;

// Referenced classes of package org.tp23.antinstaller.antmod:
//            Main

public class Launcher
{

    public Launcher(Map allProperties)
    {
        this.allProperties = allProperties;
    }

    public int run(String args[], InstallerContext cxt)
        throws LaunchException, MalformedURLException
    {
        String newArgs[];
        String antHomeProperty = System.getProperty("ant.home");
        File antHome = null;
        File jarDir = null;
        File sourceJar = Locator.getClassSource(getClass());
        jarDir = sourceJar.getParentFile();
        if(antHomeProperty != null)
            antHome = new File(antHomeProperty);
        if(antHome == null || !antHome.exists())
        {
            antHome = jarDir.getParentFile();
            System.setProperty("ant.home", antHome.getAbsolutePath());
        }
        if(!antHome.exists())
            throw new LaunchException("Ant home is set incorrectly or ant could not be located");
        List libPaths = new ArrayList();
        List argList = new ArrayList();
        for(int i = 0; i < args.length; i++)
            if(args[i].equals("-lib"))
            {
                if(i == args.length - 1)
                    throw new LaunchException("The -lib argument must be followed by a library location");
                libPaths.add(args[++i]);
            } else
            {
                argList.add(args[i]);
            }

        if(libPaths.size() == 0)
            newArgs = args;
        else
            newArgs = (String[])argList.toArray(new String[0]);
        List libPathURLs = new ArrayList();
        for(Iterator i = libPaths.iterator(); i.hasNext();)
        {
            String libPath = (String)i.next();
            StringTokenizer myTokenizer = new StringTokenizer(libPath, System.getProperty("path.separator"));
            while(myTokenizer.hasMoreElements()) 
            {
                String elementName = myTokenizer.nextToken();
                File element = new File(elementName);
                if(elementName.indexOf("%") == -1 || element.exists())
                {
                    if(element.isDirectory())
                    {
                        URL dirURLs[] = Locator.getLocationURLs(element);
                        for(int j = 0; j < dirURLs.length; j++)
                            libPathURLs.add(dirURLs[j]);

                    }
                    libPathURLs.add(element.toURL());
                }
            }
        }

        URL libJars[] = (URL[])libPathURLs.toArray(new URL[0]);
        File toolsJar = Locator.getToolsJar();
        File antLibDir = null;
        String antLibDirProperty = System.getProperty("ant.library.dir");
        if(antLibDirProperty != null)
            antLibDir = new File(antLibDirProperty);
        if(antLibDir == null || !antLibDir.exists())
        {
            antLibDir = jarDir;
            System.setProperty("ant.library.dir", antLibDir.getAbsolutePath());
        }
        URL systemJars[] = Locator.getLocationURLs(antLibDir);
        File userLibDir = new File(System.getProperty("user.home"), ".ant/lib");
        URL userJars[] = Locator.getLocationURLs(userLibDir);
        int numJars = libJars.length + userJars.length + systemJars.length;
        if(toolsJar != null)
            numJars++;
        URL jars[] = new URL[numJars];
        System.arraycopy(libJars, 0, jars, 0, libJars.length);
        System.arraycopy(userJars, 0, jars, libJars.length, userJars.length);
        System.arraycopy(systemJars, 0, jars, userJars.length + libJars.length, systemJars.length);
        if(toolsJar != null)
            jars[jars.length - 1] = toolsJar.toURL();
        StringBuffer baseClassPath = new StringBuffer(System.getProperty("java.class.path"));
        if(baseClassPath.charAt(baseClassPath.length() - 1) == File.pathSeparatorChar)
            baseClassPath.setLength(baseClassPath.length() - 1);
        for(int i = 0; i < jars.length; i++)
        {
            baseClassPath.append(File.pathSeparatorChar);
            baseClassPath.append(Locator.fromURI(jars[i].toString()));
        }

        System.setProperty("java.class.path", baseClassPath.toString());
        URLClassLoader loader = new URLClassLoader(jars);
        Thread.currentThread().setContextClassLoader(loader);
        Main main;
        Properties props;
        main = new Main();
        props = new Properties();
        props.putAll(allProperties);
        return main.startAnt(newArgs, props, null, cxt);
        Throwable t;
        t;
        t.printStackTrace();
        return 1;
        Throwable ex;
        ex;
        Main main;
        String newArgs[];
        Properties props;
        System.setProperty("ant.home", (new File(".")).getAbsolutePath());
        main = new Main();
        newArgs = new String[args.length - 2];
        int i = 0;
        int n = 0;
        for(; i < args.length; i++)
            if(args[i].equals("-lib"))
                i++;
            else
                newArgs[n++] = args[i];

        props = new Properties();
        props.putAll(allProperties);
        return main.startAnt(newArgs, props, null, cxt);
        Throwable t;
        t;
        t.printStackTrace();
        return 1;
    }

    public static final String ANTHOME_PROPERTY = "ant.home";
    public static final String ANTLIBDIR_PROPERTY = "ant.library.dir";
    public static final String USER_LIBDIR = ".ant/lib";
    public static final String MAIN_CLASS = "org.apache.tools.ant.Main";
    private final Map allProperties;
}
