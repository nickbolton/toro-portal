/*
 * Copyright (C) 2007 Unicon, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this distribution.  It is also available here:
 * http://www.fsf.org/licensing/licenses/gpl.html
 *
 * As a special exception to the terms and conditions of version 
 * 2 of the GPL, you may redistribute this Program in connection 
 * with Free/Libre and Open Source Software ("FLOSS") applications 
 * as described in the GPL FLOSS exception.  You should have received
 * a copy of the text describing the FLOSS exception along with this
 * distribution.
 */
/*
* Generated by Skeler by IBS-DP
* DO NOT MODIFY
*/
package net.unicon.academus.apps.addressbook;

public class AddressBookBoSkel extends net.unicon.academus.apps.rad.BaseSkel implements AddressBookBoHome, AddressBookBoRemote {
  private AddressBookBo m_bo = null;

  public void remove
    () {
    if (m_bo != null) {
      m_bo.ejbRemove();
      m_bo = null;
    }
  }

  public AddressBookBoRemote create() throws java.rmi.RemoteException, javax.ejb.CreateException {
    AddressBookBoSkel remote = new AddressBookBoSkel();
    remote.m_bo = new AddressBookBo();
    populateProperty(remote.m_bo);
    remote.m_bo.ejbCreate();
    return remote;
  }

  public void ejbActivate() throws java.rmi.RemoteException {
    m_bo.ejbActivate();
  }

  public void ejbPassivate() throws java.rmi.RemoteException {
    m_bo.ejbPassivate();
  }

  public void setSessionContext(javax.ejb.SessionContext arg0) throws java.rmi.RemoteException {
    m_bo.setSessionContext(arg0);
  }

  public boolean addContacts(net.unicon.academus.apps.addressbook.ContactData arg0[]) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.addContacts(arg0);
  }

  public int addContact(net.unicon.academus.apps.addressbook.ContactData arg0,net.unicon.academus.apps.addressbook.FolderData[] arg1) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.addContact(arg0,arg1);
  }

  public java.util.Vector listContacts(java.lang.String arg0, java.lang.String arg1) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.listContacts(arg0, arg1);
  }

  public java.util.Vector listAllContacts(java.lang.String arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.listAllContacts(arg0);
  }

  public java.util.Vector searchContacts(java.lang.String arg0, java.lang.String arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, int arg5) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.searchContacts(arg0, arg1, arg2, arg3, arg4, arg5);
  }

  public void searchContacts(java.util.Vector arg0 , java.lang.String arg1, java.lang.String arg2, java.lang.String arg3, java.lang.String arg4, java.lang.String arg5, int arg6) throws java.lang.Exception, java.rmi.RemoteException {
    m_bo.searchContacts(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
  }

  public java.util.Vector searchFolders(String arg0, String arg1, int arg2) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.searchFolders(arg0, arg1, arg2);
  }

  public net.unicon.academus.apps.addressbook.ContactData getContact(java.lang.String arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.getContact(arg0);
  }

  public net.unicon.academus.apps.addressbook.ContactData getContactByName(java.lang.String arg0,java.lang.String arg1) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.getContactByName(arg0,arg1);
  }

  public net.unicon.academus.apps.addressbook.ContactData[] getContacts(java.lang.String arg0[]) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.getContacts(arg0);
  }

  public net.unicon.academus.apps.addressbook.ContactData getContactByRef(java.lang.String arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.getContactByRef(arg0);
  }

  public net.unicon.academus.apps.addressbook.ContactData getContactByRef(java.lang.String arg0 , java.lang.String arg1) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.getContactByRef(arg0, arg1);
  }

  public net.unicon.academus.apps.addressbook.ContactData[] getContactByRefs(java.lang.String arg0[]) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.getContactByRefs(arg0);
  }

  public boolean deleteContact(java.lang.String arg0, java.lang.String arg1) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.deleteContact(arg0, arg1);
  }

  public void deleteContacts(net.unicon.academus.apps.addressbook.ContactData[] arg0) throws java.lang.Exception, java.rmi.RemoteException {
    m_bo.deleteContacts(arg0);
  }

  public boolean updateContact(net.unicon.academus.apps.addressbook.ContactData arg0 ,net.unicon.academus.apps.addressbook.FolderData[] arg1) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.updateContact(arg0, arg1);
  }

  public int addFolder(net.unicon.academus.apps.addressbook.FolderData arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.addFolder(arg0);
  }

  public boolean updateFolder(java.lang.String arg0, java.lang.String arg1) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.updateFolder(arg0, arg1);
  }

  public boolean deleteFolder(java.lang.String arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.deleteFolder(arg0);
  }

  public java.util.Vector listFolders(java.lang.String arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.listFolders(arg0);
  }

  public net.unicon.academus.apps.addressbook.FolderData getFolder(java.lang.String arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.getFolder(arg0);
  }

  public java.util.Vector getFolders(java.lang.String arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.getFolders(arg0);
  }

  public boolean folderExistName(java.lang.String arg0, java.lang.String arg1) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.folderExistName(arg0,arg1);
  }

  public boolean folderExistId(java.lang.String arg0) throws java.lang.Exception, java.rmi.RemoteException {
    return m_bo.folderExistId(arg0);
  }
}
