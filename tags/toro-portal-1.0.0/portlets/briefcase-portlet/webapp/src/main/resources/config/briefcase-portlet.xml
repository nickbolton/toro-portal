<!--
  Copyright (C) 2007 Unicon, Inc.

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this distribution.  It is also available here:
  http://www.fsf.org/licensing/licenses/gpl.html

  As a special exception to the terms and conditions of version 
  2 of the GPL, you may redistribute this Program in connection 
  with Free/Libre and Open Source Software ("FLOSS") applications 
  as described in the GPL FLOSS exception.  You should have received
  a copy of the text describing the FLOSS exception along with this
  distribution.
-->
<!--

        *************************************
        ** BRIEFCASE PORTLET CONFIGURATION **
        *************************************

Use this XML document to configure the BriefcasePortlet.  The root element must
be <briefcase>.

Drive(s)
********
The BriefcasePortlet may include one or more 'drives,' top-level nodes from
which folders and files may be accessed.  Specify a <drive> element for each
drive you wish to include.

The <drive> element has the following attributes:
    - @handle           A simple identifyer for the drive.  No two drives may
                        have the same handle (document scope).
    - @max-upload       [Optional] Maximum file size (in bytes) that may be
                        uploaded to the drive.  3MB=3145728, 4MB=4194304,
                        5MB=5242880, etc.  Setting the value to zero or omitting
                        the attribute means there is no limit to individual file
                        size.
    - @large-icon       Specifies the look of the large drive icon on the
                        welcome page.  Use 'largePersonal,' 'largeShared,'
                        'largeNetwork,' or a custom icon.  Custom icons must
                        be defined as CSS classes within the rendering layer
                        (Modulo).
    - @open-icon        Specifies the look of the open drive icon on the folder
                        view.  Use 'folderopen,' 'sharedfolderopen,'
                        'networkfolderopen,' or a custom icon.  Custom icons
                        must be defined as CSS classes within the rendering
                        layer (Modulo).
    - @closed-icon      Specifies the look of the open drive icon on the folder
                        view.  Use 'folderclosed,' 'sharedfolderclosed,'
                        'networkfolderclosed,' or a custom icon.  Custom icons
                        must be defined as CSS classes within the rendering
                        layer (Modulo).
    - @share-target     [Optional] Specifies the handle of a drive (defined in
                        this document) to which folders may be shared from this
                        drive.  If a drive is not specified, folders in this
                        drive may not be shared.

The <drive> element has the following child elements:
    - <label>           The label given to this drive in the UI.
    - <description>     The description given to this drive in the UI.
    - <access-broker>   Responsible for managing the root folders (entry points)
                        that will be available to users within this drive.
                        Entry points are highly configurable and a little
                        complex.  See the section below for details.

Access Broker
*************
Each drive contains an access broker to manage the root folders (entry points)
available within it.  Specify an <access-broker> element within each drive
defined by the document.

The <access-broker> element has the following attributes:
    - @handle           A simple identifyer for the broker.  No two brokers may
                        have the same handle (JVM scope).
    - @impl             Specifies a Java class that implements IAccessBroker.
                        At the time of this writing, there are three available
                        implementations:  JvmAccessBroker, RdbmsAccessBroker,
                        and JitAccessBroker.  The allowable content model of the
                        <access-broker> element depends upon the specified
                        implementation.

JvmAccessBroker:
As it's name suggests, the JvmAccessBroker keeps its data entirely within
memory (i.e. the JVM).  Any information held my an instance of this class is
gone on restart.  The content model of the <access-broker> element specifies the
data that should be loaded into the instance on creation.  The JvmAccessBroker
is a great way to set up access relationships that are understood at deployment
time.

For the JvmAccessBroker, the <access-broker> element has the following child
elements:
    - <entry>           Specifies an entry in the broker.  See example below...

Example <entry> element:
<entry target="FSA://net.unicon.demetrius.fac.filesystem.FsResourceFactory/[Test]/F:/test">// Use standard Resource Factory URL syntax.
    <identity type="GROUP">Everyone</identity>// Type must be 'GROUP' or 'USER.'  Specify the path to a group.
    <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">// 1=read, 2=edit, 3=delete
        <type handle="READ" value="GRANT"/>
        <type handle="ADD" value="GRANT"/>
        <type handle="DELETE" value="GRANT"/>
        <type handle="EDIT" value="GRANT"/>
        <type handle="SHARE" value="GRANT"/>
    </access>
</entry>

RdbmsAccessBroker:
As it's name suggests, the RdbmsAccessBroker stores its data in a database.  The
RdbmsAccessBroker is a good choice for entries that need to survive a restart
but are not known at deployment time.

For the RdbmsAccessBroker, the <access-broker> element has a single child
element, <access>. This child element requires the attribute 'impl', which
specifies the java class that represents the list of AccessTypes used by that
access-broker instance.

Example element:
<access-broker handle="shared-resources" impl="net.unicon.alchemist.access.rdbms.RdbmsAccessBroker">
    <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType"/>
</access-broker>

JitAccessBroker:
The 'J-I-T' in JitAccessBroker stands for 'just-in-time.'  The JitAccessBroker
creates entries where none exist according to rules specified in its content
model.  Use the JitAccessBroker to create individual, instanced entry points for
users and groups.  The JitAccessBroker uses the nested enclosure pattern, and
must be backed by another broker instance.

For the JitAccessBroker, the <access-broker> element has the following child
elements:
    - <jit-rule>        Specifies a creation rule.  The JitAccessBroker will
                        apply the *first* (and only thr first) behavior that
                        triggers for each rule.  See example below...
    - <access-broker>   Specifies another broker instance to do the actual data
                        management.

Example <jit-rule> element:
<jit-rule>// The JitAccessBroker will review each rule, not just the first to 'work.'
    <behavior>// The 1st behavior to trigger will be applied (if not already applied).  Subsequent behaviors will be ignored.
        <trigger type="GROUP">Everyone-Faculty</trigger>// If the user matches this criterion, ...
        <target type="USER" />// ...for the identity specified, ...
        <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">// ...together with the specified access type(s), ...
            <type handle="READ" value="GRANT"/>
            <type handle="ADD" value="GRANT"/>
            <type handle="DELETE" value="GRANT"/>
            <type handle="EDIT" value="GRANT"/>
            <type handle="SHARE" value="GRANT"/>
        </access>
        <creator impl="net.unicon.academus.apps.briefcase.FsFactoryCreator">// ...we will construct a target and create an entry for it.
            <size>200</size>
            <root-name>My Files</root-name>
            <seed-path>@toro.data.home@/briefcase_portlet</seed-path>
        </creator>
    </behavior>
    <behavior>// Subsequent behaviors are reviewed if earlier ones didn't trigger.
        <trigger type="GROUP">Everyone-STUDENTS</trigger>
        <target type="USER" />
        <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
            <type handle="READ" value="GRANT"/>
            <type handle="ADD" value="GRANT"/>
            <type handle="DELETE" value="GRANT"/>
            <type handle="EDIT" value="GRANT"/>
            <type handle="SHARE" value="GRANT"/>
        </access>
        <creator impl="net.unicon.academus.apps.briefcase.FsFactoryCreator">
            <size>50</size>
            <root-name>My Files</root-name>
            <seed-path>@toro.data.home@/briefcase_portlet</seed-path>
        </creator>
    </behavior>
</jit-rule>

UserAttributeAccessBroker:
The UserAttributeAccessBroker creates entries for the user based on their attributes
in either LDAP or active directory.

For the UserAttributeAccessBroker, the <access-broker> element has the
<user-attribute> child element. The name attribute specifies the attribute name
that can be retrieved from the User object. The impl attribute specifies the
implementing class that understands the required object type. For the briefcase
this will be "net.unicon.academus.apps.briefcase.UserAttributeDirectory".

Here is an example :
<user-attribute name="homeDirectory"
        impl="net.unicon.academus.apps.briefcase.UserAttributeDirectory">
    <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">      // access that the user has on this entry
        <type handle="VIEW" value="GRANT"/>
        <type handle="ADD" value="GRANT"/>
        <type handle="DELETE" value="GRANT"/>
        <type handle="EDIT" value="GRANT"/>
        <type handle="SHARE" value="GRANT"/>
    </access>
    <max-size>0</max-size>              // max-size of the factory. 0 = unlimited space
    <root-name>My Files 1</root-name>   // name of the entry root
</user-attribute>


Logging facitilty:
The portlet provides a logger that can be used to log information to the specified
PrintStream. The particular implementation of the logger needs to be specified as
an 'impl' attribute for the <logger> element. The logger also supports the activation of
zero or more logging categories using the <category> element inside <logger-categories>.
These categories have been pre-defined in BriefcaseLoggerCategories.
Messages can be logged against zero or more categories. The messages with active
categories will be sent to the PrintStream.

The example given below uses the SystemOutLogger and activates the categories in the
<category> element.

    <logger impl="net.unicon.alchemist.log.SystemOutLogger">
        <logger-categories>
            <category name="query"/>
            <category name="briefcase"/>
        </logger-categories>
    </logger>

//-->

<briefcase>

    <!--
        Civis implementation to be used to resolve usernames and group paths
        to academus users and groups. This should not require
        modification, as it utilized the Academus framework for gathering this
        information.
    -->
    <civis id="addressBook" impl="net.unicon.civis.fac.academus.AcademusCivisFactory">
        <restrictor impl="net.unicon.civis.grouprestrictor.AcademusGroupRestrictor" />
    </civis>

    <drive handle="personal" max-upload="3145728" large-icon="largePersonal" open-icon="folderopen" closed-icon="folderclosed" share-target="shared">
        <label>Personal Folders</label>
        <description>Your Personal Folders are where you can store your documents, notes, photos, and more.</description>
        <access-broker handle="personal-jit" impl="net.unicon.alchemist.access.permissions.PermissionsAccessBroker">

            <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType"/>

            <targets>
                <access-broker handle="personal-resources-t" impl="net.unicon.alchemist.access.jit.JitAccessBroker">
                    <jit-rule>
                        <behavior>
                            <trigger type="GROUP">Everyone</trigger>
                            <target type="USER" />
                            <access impl="net.unicon.alchemist.access.permissions.DummyAccessType">
                                <type handle="DUMMY" value="GRANT"/>
                            </access>
                            <creator impl="net.unicon.academus.apps.briefcase.FsFactoryCreator">
                                <size>50</size>
                                <root-name>My Files</root-name>
                                <seed-path>@toro.data.home@/briefcase_portlet</seed-path>
                            </creator>
                        </behavior>
                    </jit-rule>

                    <access-broker handle="personal-resources-t-i" impl="net.unicon.alchemist.access.rdbms.RdbmsAccessBroker">
                        <access impl="net.unicon.alchemist.access.permissions.DummyAccessType"/>
                    </access-broker>
                </access-broker>
            </targets>

            <permissions>
                <access-broker handle="personal-resources-p" impl="net.unicon.alchemist.access.jit.JitAccessBroker">
                    <jit-rule>
                        <behavior>
                            <trigger type="GROUP">Everyone - Staff</trigger>
                            <target type="GROUP">Everyone - Staff</target>
                            <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
                                <type handle="VIEW" value="GRANT"/>
                                <type handle="ADD" value="GRANT"/>
                                <type handle="DELETE" value="GRANT"/>
                                <type handle="EDIT" value="GRANT"/>
                                <type handle="SHARE" value="GRANT"/>
                            </access>
                            <creator impl="net.unicon.alchemist.access.permissions.DummyCreator"/>
                        </behavior>
                        <behavior>
                            <trigger type="GROUP">Everyone - Students</trigger>
                            <target type="GROUP">Everyone - Students</target>
                            <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
                                <type handle="VIEW" value="GRANT"/>
                                <type handle="ADD" value="GRANT"/>
                                <type handle="DELETE" value="GRANT"/>
                                <type handle="EDIT" value="GRANT"/>
                                <type handle="SHARE" value="GRANT"/>
                            </access>
                            <creator impl="net.unicon.alchemist.access.permissions.DummyCreator"/>
                        </behavior>
                        <behavior>
                            <trigger type="GROUP">Everyone - Staff</trigger>
                            <target type="GROUP">Everyone - Staff</target>
                            <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
                                <type handle="VIEW" value="GRANT"/>
                                <type handle="ADD" value="GRANT"/>
                                <type handle="DELETE" value="GRANT"/>
                                <type handle="EDIT" value="GRANT"/>
                                <type handle="SHARE" value="GRANT"/>
                            </access>
                            <creator impl="net.unicon.alchemist.access.permissions.DummyCreator"/>
                        </behavior>
                        <behavior>
                            <trigger type="GROUP">Everyone</trigger>
                            <target type="GROUP">Everyone</target>
                            <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
                                <type handle="VIEW" value="GRANT"/>
                                <type handle="ADD" value="GRANT"/>
                                <type handle="DELETE" value="GRANT"/>
                                <type handle="EDIT" value="GRANT"/>
                                <type handle="SHARE" value="GRANT"/>
                            </access>
                            <creator impl="net.unicon.alchemist.access.permissions.DummyCreator"/>
                        </behavior>
                    </jit-rule>

                    <access-broker
                        handle="personal-resources-p-i"
                        impl="net.unicon.alchemist.access.rdbms.RdbmsAccessBroker"
                        needsDataSource="true">
                        <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType"/>
                    </access-broker>
                </access-broker>
            </permissions>

        </access-broker>
    </drive>
    
    <!--<drive handle="personalldap" max-upload="3145728" large-icon="largePersonal" open-icon="folderopen" closed-icon="folderclosed" share-target="shared">
        <label>Personal LDAP Folders</label>
        <description>Your LDAP Personal Folders are where you can store your documents, notes, photos, and more.</description>
        <access-broker handle="personal-uattr" impl="net.unicon.alchemist.access.userattribute.UserAttributeAccessBroker">
            <user-attribute name="homeDirectoryOFF" impl="net.unicon.academus.apps.briefcase.UserAttributeDirectory">
                <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
                    <type handle="VIEW" value="GRANT"/>
                    <type handle="ADD" value="GRANT"/>
                    <type handle="DELETE" value="GRANT"/>
                    <type handle="EDIT" value="GRANT"/>
                    <type handle="SHARE" value="GRANT"/>
                </access>
                <max-size>0</max-size>
                <root-name>My Files 1</root-name>
            </user-attribute>
            <user-attribute name="class-dir" impl="net.unicon.academus.apps.briefcase.UserAttributeDirectory">
                <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
                    <type handle="VIEW" value="GRANT"/>
                    <type handle="ADD" value="GRANT"/>
                </access>
                <max-size>0</max-size>
                <root-name>My Files 2</root-name>
            </user-attribute>
        </access-broker>
    </drive>-->
    
    <drive handle="shared" large-icon="largeShared" open-icon="sharedfolderopen" closed-icon="sharedfolderclosed" sharing="on">
        <label>Shared Folders</label>
        <description>Access other files that have been shared with you.</description>
        <access-broker handle="shared-resources" impl="net.unicon.alchemist.access.rdbms.RdbmsAccessBroker">
            <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType"/>
        </access-broker>
    </drive>
 
 <!--   
    <drive handle="network" large-icon="largeNetwork" open-icon="networkfolderopen" closed-icon="networkfolderclosed" sharing="off">
        <label>Network Folders</label>
        <description>The Network Folders contain common folders that you and others on the Campus can access.</description>
        <access-broker handle="network-resources" impl="net.unicon.alchemist.access.jvm.JvmAccessBroker">
            <entry target="FSA://net.unicon.demetrius.fac.filesystem.FsResourceFactory/[Test]//Developer/Academus/toro/data/SystemTestSharedNetworkDrive">
                <identity type="GROUP">Everyone</identity>
                <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
                    <type handle="VIEW" value="GRANT"/>
                    <type handle="ADD" value="GRANT"/>
                    <type handle="DELETE" value="GRANT"/>
                    <type handle="EDIT" value="GRANT"/>
                    <type handle="SHARE" value="GRANT"/>
                </access>
            </entry>
            <entry target="FSA://net.unicon.demetrius.fac.filesystem.FsResourceFactory/[Authoring]//Developer/Academus/toro/data/SystemTestSharedNetworkDrive">
                <identity type="GROUP">Everyone</identity>
                <access impl="net.unicon.academus.apps.briefcase.BriefcaseAccessType">
                    <type handle="VIEW" value="GRANT"/>
                </access>
            </entry>
        </access-broker>
    </drive>
-->

    <logger impl="net.unicon.alchemist.log.SystemOutLogger">
        <logger-categories>
            <category name="query"/>
            <category name="briefcase"/>
        </logger-categories>
    </logger>
</briefcase>
