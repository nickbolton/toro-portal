// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Installer.java

package org.tp23.antinstaller.taskdefs;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.taskdefs.Jar;
import org.apache.tools.ant.taskdefs.Manifest;
import org.apache.tools.ant.taskdefs.ManifestException;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.types.ZipFileSet;
import org.apache.tools.zip.ZipOutputStream;
import org.tp23.antinstaller.renderer.swing.plaf.LookAndFeelFactory;
import org.tp23.antinstaller.runtime.ConfigurationLoader;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

public class Installer extends Jar
{

    public Installer()
    {
        failOnError = false;
        validateConfig = false;
        buildFileSet = false;
        configFileSet = false;
        startCheckDuplicates = false;
        archiveType = "jar";
        emptyBehavior = "create";
        setEncoding("UTF8");
    }

    protected void cleanUp()
    {
        super.cleanUp();
    }

    public void reset()
    {
        super.reset();
        extractType = null;
        installConfig = null;
        buildFile = null;
    }

    public void setInstallConfig(File installConfig)
    {
        this.installConfig = installConfig;
        if(!installConfig.exists())
            throw new BuildException("AntInstall config: " + installConfig + " does not exist.");
        ZipFileSet fs = new ZipFileSet();
        fs.setFile(installConfig);
        fs.setFullpath("antinstall-config.xml");
        super.addFileset(fs);
        if(buildFile != null)
            startCheckDuplicates = true;
    }

    public void setBuildFile(File buildFile)
    {
        this.buildFile = buildFile;
        if(!buildFile.exists())
            throw new BuildException("AntInstall build file: " + buildFile + " does not exist.");
        ZipFileSet fs = new ZipFileSet();
        fs.setFile(buildFile);
        fs.setFullpath("build.xml");
        super.addFileset(fs);
        if(installConfig != null)
            startCheckDuplicates = true;
    }

    public void setIcons(String icons)
    {
        this.icons = icons;
        File iconJar = new File(antInstallLib, "ai-icons-" + icons + ".jar");
        if(!iconJar.exists())
        {
            throw new BuildException("Missing icons: " + iconJar + " does not exist.");
        } else
        {
            FileSet set = new FileSet();
            set.setFile(iconJar);
            addZipGroupFileset(set);
            return;
        }
    }

    public void setExtractType(String extractType)
    {
        this.extractType = extractType;
    }

    public void setFailOnError(boolean fail)
    {
        failOnError = fail;
    }

    public void setValidateConfig(boolean validate)
    {
        validateConfig = validate;
    }

    public void setAntInstallLib(File antInstallLib)
    {
        this.antInstallLib = antInstallLib;
        FileSet set = new FileSet();
        set.setFile(new File(antInstallLib, "ant-installer.jar"));
        addZipGroupFileset(set);
    }

    public void setAntLib(File antLib)
    {
        this.antLib = antLib;
        FileSet set = new FileSet();
        set.setFile(new File(antLib, "ant.jar"));
        set.setFile(new File(antLib, "ant-launcher.jar"));
        addZipGroupFileset(set);
    }

    public void setXercesLib(File xercesLib)
    {
        this.xercesLib = xercesLib;
        FileSet set = new FileSet();
        set.setFile(new File(xercesLib, "xercesImpl.jar"));
        set.setFile(new File(xercesLib, "xml-apis.jar"));
        addZipGroupFileset(set);
    }

    public void execute()
    {
        log(".-------------------------------.");
        log("|-(o--~AntInstaller.sf.net~--o)-|");
        log("`-----------------by-Paul-Hinds-\264");
        if(validateConfig)
            validateConfig();
        else
        if(extractType.equals("SelfExtractor"))
            readConfig();
        if(LookAndFeelFactory.isDefault(getLaf()))
        {
            FileSet set = new FileSet();
            set.setFile(new File(antInstallLib, "jgoodies-edited-1_2_2.jar"));
            addZipGroupFileset(set);
        }
        super.execute();
    }

    protected void initZipOutputStream(ZipOutputStream zOut)
        throws IOException, BuildException
    {
        if(buildFile == null && !isInUpdateMode())
            throw new BuildException("buildFile attribute is required", getLocation());
        if(installConfig == null && !isInUpdateMode())
            throw new BuildException("installConfig attribute is required", getLocation());
        try
        {
            addConfiguredManifest(getManifest());
        }
        catch(ManifestException me)
        {
            throw new BuildException("Cant add AntInstaller Manifest", me, getLocation());
        }
        super.initZipOutputStream(zOut);
    }

    protected void zipFile(InputStream is, ZipOutputStream zOut, String vPath, long lastModified, File fromArchive, int mode)
        throws IOException
    {
        if(vPath.equalsIgnoreCase("antinstall-config.xml"))
        {
            if(buildFileSet)
                log("Two antinstall-config.xml files in jar", 1);
            buildFileSet = true;
        }
        if(vPath.equalsIgnoreCase("build.xml"))
        {
            if(configFileSet)
                log("Two build.xml files in jar", 1);
            configFileSet = true;
        }
        super.zipFile(is, zOut, vPath, lastModified, fromArchive, mode);
    }

    private String getLaf()
    {
        if(laf == null)
            return "org.tp23.jgoodies.plaf.plastic.PlasticXPLookAndFeel";
        else
            return laf;
    }

    private Manifest getManifest()
        throws ManifestException
    {
        if(extractType.equalsIgnoreCase("NonExtractor"))
            return getNonExtractorManifest();
        if(extractType.equalsIgnoreCase("SelfExtractor"))
            return getSelfExtractorManifest();
        else
            throw new BuildException("Invalid extractType: " + extractType);
    }

    private Manifest getNonExtractorManifest()
        throws ManifestException
    {
        return getCustomManifest("org.tp23.antinstaller.selfextract.NonExtractor");
    }

    private Manifest getSelfExtractorManifest()
        throws ManifestException
    {
        return getCustomManifest("org.tp23.antinstaller.selfextract.SelfExtractor");
    }

    private Manifest getCustomManifest(String mainClass)
        throws ManifestException
    {
        log("Creating MANIFEST.mf");
        Manifest newManifest = new Manifest();
        org.apache.tools.ant.taskdefs.Manifest.Section mainSection = newManifest.getMainSection();
        org.apache.tools.ant.taskdefs.Manifest.Attribute attmc = new org.apache.tools.ant.taskdefs.Manifest.Attribute();
        attmc.setName("Main-Class");
        attmc.setValue(mainClass);
        mainSection.addAttributeAndCheck(attmc);
        org.apache.tools.ant.taskdefs.Manifest.Attribute attlaf = new org.apache.tools.ant.taskdefs.Manifest.Attribute();
        attlaf.setName("Look-And-Feel");
        attlaf.setValue(getLaf());
        mainSection.addAttributeAndCheck(attlaf);
        return newManifest;
    }

    protected void validateConfig()
    {
        int ret = 1;
        try
        {
            log("validating config...");
            ConfigurationLoader configurationLoader = new ConfigurationLoader();
            configurationLoader.readConfig(installConfig.getParentFile(), installConfig.getName());
            ret = configurationLoader.validate();
            laf = configurationLoader.getInstaller().getLookAndFeel();
            if(ret != 0)
                err();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
            err();
        }
        try
        {
            log("parsing included build.xml...");
            InputSource xmlInp = new InputSource(new FileInputStream(buildFile));
            SAXParserFactory parserFactory = SAXParserFactory.newInstance();
            SAXParser parser = parserFactory.newSAXParser();
            parser.parse(xmlInp, new DefaultHandler() {

                public void error(SAXParseException e)
                    throws SAXException
                {
                    throw e;
                }

                public void fatalError(SAXParseException e)
                    throws SAXException
                {
                    throw e;
                }

            }
);
            log("build.xml is well formed");
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
            errNestedBuildXml();
        }
    }

    protected void readConfig()
    {
        try
        {
            log("reading config...");
            ConfigurationLoader configurationLoader = new ConfigurationLoader();
            configurationLoader.readConfig(installConfig.getParentFile(), installConfig.getName());
            laf = configurationLoader.getInstaller().getLookAndFeel();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
            err();
        }
    }

    private void err()
    {
        String errorMsg = "Error in config file:" + installConfig.getAbsolutePath();
        if(failOnError)
        {
            throw new BuildException(errorMsg);
        } else
        {
            log(errorMsg, 0);
            return;
        }
    }

    private void errNestedBuildXml()
    {
        String errorMsg = "Error in included build file:" + buildFile.getAbsolutePath();
        if(failOnError)
        {
            throw new BuildException(errorMsg);
        } else
        {
            log(errorMsg, 0);
            return;
        }
    }

    public static final String NON_EXTRACTOR = "NonExtractor";
    public static final String SELF_EXTRACTOR = "SelfExtractor";
    private String extractType;
    private File installConfig;
    private File buildFile;
    private File antInstallLib;
    private File xercesLib;
    private File antLib;
    private String laf;
    private String icons;
    protected boolean failOnError;
    protected boolean validateConfig;
    private boolean buildFileSet;
    private boolean configFileSet;
    private boolean startCheckDuplicates;
}
